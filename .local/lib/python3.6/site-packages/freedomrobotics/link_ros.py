#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (C) Freedom Robotics, 2019 - All Rights Reserved
This file is part of the the Freedom Python SDK
Unauthorized copying of this file, via any medium is strictly prohibited
Proprietary and confidential
"""
import time

import rospy

from freedomrobotics.helpers import system_commands
from freedomrobotics.link_ros_base import LinkROSBase

PROCESS_NAME = 'fr_link_ros'


class LinkROS(LinkROSBase):

    def __init__(self, credentials_location=None, console_log=True):
        """ Initializes a Link object with name "ros" and starts listening
            for ROS topics which should be uploaded based on the definition
            stored in the cloud for this device.

        Parameters:
        credentials_location -- An optional custom path for where to fine the
            device credentials. Usually, ~/.config/freedomrobotics/credentials
            should always be used
        console_log -- If True will log to both console and file, otherwise
            it will log only to the log file.
        """
        super(LinkROS, self).__init__(
            credentials_location=credentials_location,
            console_log=console_log,
        )


if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument('--no-console-log', action='store_true', help="Don't send the logs to stdout")
    args = ap.parse_args()

    system_commands.set_process_name(PROCESS_NAME)

    rospy.init_node("link_ros")
    link = LinkROS(console_log=not args.no_console_log)
    rospy.on_shutdown(link.on_exit)

    try:
        while not link.is_shutdown():
            time.sleep(0.1)
    except:
        pass
    finally:
        # Cleanup node
        try:
            rospy.signal_shutdown('LinkROS exited')
        except:
            pass
