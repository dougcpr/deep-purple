#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (C) Freedom Robotics, 2019 - All Rights Reserved

This file is part of the the Freedom Python SDK

Unauthorized copying of this file, via any medium is strictly prohibited
Proprietary and confidential
"""
import time
from freedomrobotics.link_base import LinkBase
from freedomrobotics.helpers.logging_helpers import LinkLogHandlerBase


class Link(LinkBase):
    """
    Main class for Freedom Python Link

    """
    def __init__(self, name, command_callback=None, credentials_location=None, credentials=None, console_log=True, logger=None):
        """Creates a connection to the Freedom API

        Connects to the API with the specified credentials and starts
        listening for commands if a `command_callback` is specified while
        uploading any messages sent to it.

        Parameters:
        name -- The unique name for this node, such as 'perception' or 'motion'
            which defines the data which will be uploaded from it
        command_callback -- An optional callback if you would like to receive
            remote commands for this node
        credentials_location -- An optional custom path for where to fine the
            device credentials. If not specified defaults to:
            ~/.config/freedomrobotics/credentials
        credentials -- An optional dictionary describing the needed credentials
        console_log -- If True will log to both console and file, otherwise
            it will log only to the log file.
        logger -- If present will use that logger instead of creating a new one

        Raises:
        IOError -- If the credentials file does not exist or the user
            does not have rights to read it.
        requests.exceptions.ConnectionError -- If the compute is not connected
            to the internet so it is not possible to communicate with the API.
        """

        super(Link, self).__init__(
            name,
            command_callback=command_callback,
            credentials_location=credentials_location,
            credentials=credentials,
            console_log=console_log,
            logger=logger,
        )

    def message(self, topic, topic_type, data, platform=None, utc_time=None):
        """Add a message to the queue to upload

        Adds a well formatted message to the queue of messages to be
        uploaded. The queue is uploaded roughly each second as a batch
        to the server.

        Messages are rate limited based on their API `mc.ros.topics.uploadable`
        attribute per topic name.

        Parameters:
        topic -- a well-known name specifying the named bus over which
            messages will be uploaded, The topic should start with a `/`
            and use `/`'s as for describing the hierarchy of data, such
            as `/battery/voltage`. 
        type -- a well-known topic type specifying the data payload
            definition. It should describe the class of data such 
            as `std_msgs/String` or `nav_msgs/Odometry`. 
        data -- a dictionary of data who's contents are known due to
            the topic type. 
        platform --- Optional parameter to specific the endpoint data is meant
            for. Usually it will be `custom` or `ros` for normal usage.
        utc_time -- Optional parameter to use to later upload data in batch
            mode. Data must be uploaded sequentially to enable proper time-based
            filtering of topic rates.

        Raises:
        Exception -- if
        """

        super(Link, self).message(topic, topic_type, data, platform=platform, utc_time=utc_time)

    def log(self, level, msg, stack_trace=None):
        """Records a log message with stacktrace, file and function name
            details for easy debugging.

        This is a convenience wrapper around `message( ... )` to make it
            easier to log.

        Parameters:
        level -- A string in ["debug", "info", "warn", "error", "fatal"].
        msg -- a human readable sentence or two defining the log message.

        """
        super(Link, self).log(level, msg, stack_trace=stack_trace)

    def image(self, topic, image):
        """Uploads an image on the named topic, setting its
        topic type to "sensor_msgs/Image" and compressing
        the contents of the message using JPEG compression.

        The image is also down-sampled if it is too large.

        Paramerters:
        topic -- the string name of the topic
        image -- the numpy array defining the image
        """
        super(Link, self).image(topic, image)


class LinkLogHandler(LinkLogHandlerBase):
    """ Log handler which forwards all log messages above a specified level
    to the Freedom API.
    """

    def __init__(self, freedom_link, min_level):
        """
        Parameters:
        freedom_link -- a Link object
        min_level -- "debug", "info", "warn", "error", "fatal" to specify the minimum
            level for log messages to be propagated by this handler
        """
        super(LinkLogHandler, self).__init__(freedom_link, min_level)


if __name__ == '__main__':
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument('--no-console-log', action='store_true', help="Don't send the logs to stdout")
    args = ap.parse_args()

    link = Link("core", console_log=not args.no_console_log)

    while not link.is_shutdown():
        try:
            time.sleep(1)
        except KeyboardInterrupt:
            break

    link.trigger_shutdown()
