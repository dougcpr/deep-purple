#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Copyright (C) Freedom Robotics, 2019 - All Rights Reserved

This file is part of the the Freedom Python SDK

Unauthorized copying of this file, via any medium is strictly prohibited
Proprietary and confidential
"""

"""
This is the Python3-only implementation of WebRTC Video and data control.
It uses Asyncio as part of aoirtc, which is only supported in python3.
Therefore, we treat it as a separate application which is run in a different
process and communicated with over sockets.

Key implementation detail - everything is asyncronous for how this works,
so you need to use async (asynio.corutine), await (await) and other python3 ideas.

"""

import sys
import asyncio
from concurrent.futures import ThreadPoolExecutor

from freedomrobotics.helpers import system_commands
from freedomrobotics.linkhelpers.commands.webrtc_teleop.webrtc_server_base import main, logger


if sys.version_info < (3, 6):
    raise Exception("This module must be run in Python3.6+")

if __name__ == '__main__':
    system_commands.set_process_name("fr_webrtc")

    try:
        executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix='aio_default_executor')
        loop = asyncio.get_event_loop()
        loop.set_default_executor(executor)
        fut = asyncio.ensure_future(main())
        loop.slow_callback_duration = 0.05
        loop.run_until_complete(fut)
        for task in asyncio.Task.all_tasks():
            task.cancel()
        loop.close()
    except asyncio.CancelledError:
        logger.info("CancelledError on ending")
    except KeyboardInterrupt:
        logger.info("Keyboard exit from WebRTC Server")
    except Exception as e:
        logger.exception("Unexpected error closing webRTC Server process: {}".format(e))
    finally:
        logger.info("WebRTC Server exited fully")
