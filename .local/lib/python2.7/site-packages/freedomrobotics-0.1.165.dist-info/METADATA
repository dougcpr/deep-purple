Metadata-Version: 2.0
Name: freedomrobotics
Version: 0.1.165
Summary: The Freedom Agent Python library
Home-page: https://github.com/freedomrobotsoft/freedom_python
Author: Freedom Robotics, Inc.
Author-email: support@freedomrobotics.ai
License: Proprietary
Keywords: freedom,robotics,ros,monitoring
Platform: UNKNOWN
Classifier: License :: Other/Proprietary License
Requires-Dist: SharedArray
Requires-Dist: distro
Requires-Dist: numpy (<1.17.0,>=1.15.0)
Requires-Dist: packaging (<21.0,>=20.0)
Requires-Dist: protobuf-to-dict (<0.1.0)
Requires-Dist: psutil (>=5.4.0)
Requires-Dist: python-cjson (>=1.2.1)
Requires-Dist: requests (>=2.15.0)
Requires-Dist: setproctitle (<1.2,>=1.1.10)
Requires-Dist: setuptools (<45.0.0)
Requires-Dist: six (>=1.11.0)
Requires-Dist: yappi (>=1.0)

# Freedom Robotics Python Package

At a high level, the code in this repository is responsible for the connection between a robot and the cloud or a teleoperator (via WebRTC).
Incoming commands are processed and relayed appropriately while data is streamed out according to the bandwidth settings.
The exact implementation depends on the platform used. There are specific subclasses in the code for interfacing with ROS 1 and 2,
python stacks, and protobuf.

## Architecture

The code in this repo can be divided into two parts: **agent** and **link**.

### Agent

* runs anytime the robot's computer is powered
* only runs on Linux machines. Not installed on Mac/Windows.
* runs and watches for a LinkROS process if ROS is used and ROS is up and running.
* connects to the API
* is responsible for setting up remote ssh
* takes system measurements
* handles incoming API commands related to git, system start-up/shutdown, ROS lifecycle management, ssh
* runs as a [systemd (or initd)](https://wiki.archlinux.org/index.php/systemd) service which simply runs [agent.py](freedomrobotics/agent.py)
* main code is located at [agent_base.py](freedomrobotics/agent_base.py)
* specific functionality is in the [agent helper files](freedomrobotics/agenthelpers)

![uml_diagram_agent](documents/classes_agent.png)
(Diagram generated through `pyreverse -A -s0 -o png ./ -p agent --ignore=linkhelpers,link.py,link_ros2.py,link_ros2_base.py,link_protobuf_base.py,link_protobuf.py,link_base.py,link_ros_base.py,link_ros_common,link_ros.py,helpers`)

### Link

* responsible for sending device data up. A robot is considered *active* when Link is piping data through.
* can be run on other OS'es than Linux
* is independent from Agent
* is responsible for filtering and buffering of robot data
* does image compression
* handles incoming commands related to the platform used, e.g. which topics should be uploaded and at what frequency and WebRTC connections.
* is either instantiated by the agent (when using ROS) or by the user, e.g. when using Python directly
* sets up any WebRTC connections
* has superclass [LinkBase](freedomrobotics/link_base.py) which is subclassed for protobuf, ROS1, ROS2, and python platforms.
* specific functionality is in the [link helper files](freedomrobotics/linkhelpers)

![uml_diagram_link](documents/classes_link.png)
(Diagram generated through `pyreverse -A -s0 -k -o png ./ -p link --ignore=agent_base.py,agent.py,agenthelpers,management,helpers`)

The following explains the organization for all Link subclasses.

#### Link ROS

* `LinkROSCommon` in [link_ros_common.py](freedomrobotics/link_ros_common.py) contains code shared between ROS1 and ROS2
* `LinkROSBase` in [link_ros_base.py](freedomrobotics/link_ros_base.py) and `LinkROS2Base` in [link_ros2_base.py](freedomrobotics/link_ros2_base.py) subclass from `LinkROSCommon` and `LinkBase`.
* `LinkROS`in [link_ros.py](freedomrobotics/link_ros.py) and `LinkROS2`in [link_ros2.py](freedomrobotics/link_ros2.py) subclass from `LinkROSBase` or `LinkROS2Base`. They serve merely to instantiate `LinkROSBase` or `LinkROS2Base`.
* [Connect with ROS on docs.freedomrobotics.ai](https://docs.freedomrobotics.ai/docs/connect-with-ros)

#### Link Python

* `Link` in [link.py](freedomrobotics/link.py) (perhaps a more appropriate name would be `LinkPython` and `link_python.py`) subclasses from `LinkBase`.
* [Link Python readme](documents/link.md)
* [Connect with Python on docs.freedomrobotics.ai](https://docs.freedomrobotics.ai/docs/connect-with-python)

#### Link Protobuf

* `LinkProtobuf` in [link_protobuf.py](freedomrobotics/link_protobuf.py) subclasses from `LinkProtobufBase` in [link_protobuf_base.py](freedomrobotics/link_protobuf_base.py), which in turn subclasses from `LinkBase`.
* [Connect with Protobuf on docs.freedomrobotics.ai](https://docs.freedomrobotics.ai/docs/connect-with-protobuf)

## Development

How to set up your [development environment](documents/development.md).


