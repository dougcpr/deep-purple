// Generated by gencpp from file beginner_tutorials/SweeperCmdMsg.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_SWEEPERCMDMSG_H
#define BEGINNER_TUTORIALS_MESSAGE_SWEEPERCMDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct SweeperCmdMsg_
{
  typedef SweeperCmdMsg_<ContainerAllocator> Type;

  SweeperCmdMsg_()
    : mode(0)  {
    }
  SweeperCmdMsg_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_STOPPED)
  #undef MODE_STOPPED
#endif
#if defined(_WIN32) && defined(MODE_ON)
  #undef MODE_ON
#endif
#if defined(_WIN32) && defined(MODE_SELF_EMPTY)
  #undef MODE_SELF_EMPTY
#endif

  enum {
    MODE_STOPPED = 0u,
    MODE_ON = 1u,
    MODE_SELF_EMPTY = 2u,
  };


  typedef boost::shared_ptr< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SweeperCmdMsg_

typedef ::beginner_tutorials::SweeperCmdMsg_<std::allocator<void> > SweeperCmdMsg;

typedef boost::shared_ptr< ::beginner_tutorials::SweeperCmdMsg > SweeperCmdMsgPtr;
typedef boost::shared_ptr< ::beginner_tutorials::SweeperCmdMsg const> SweeperCmdMsgConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator1> & lhs, const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator1> & lhs, const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cd54b419a6b44f31c7e87885e628597";
  }

  static const char* value(const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cd54b419a6b44f3ULL;
  static const uint64_t static_value2 = 0x1c7e87885e628597ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/SweeperCmdMsg";
  }

  static const char* value(const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8 MODE_STOPPED = 0\n"
"uint8 MODE_ON = 1\n"
"uint8 MODE_SELF_EMPTY = 2\n"
"\n"
"\n"
"##############\n"
"uint8 mode   #\n"
;
  }

  static const char* value(const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SweeperCmdMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::SweeperCmdMsg_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_SWEEPERCMDMSG_H
